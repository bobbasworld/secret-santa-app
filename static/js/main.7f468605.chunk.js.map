{"version":3,"sources":["components/UserCard/UserCard.js","images/santa.svg","components/Navbar/Navbar.js","App.js","reportWebVitals.js","index.js","components/Navbar/Navbar.module.css","helpers.js"],"names":["UserCard","sender","receiver","className","Navbar","href","styles","logo","src","Santa","alt","logoTitle","App","useState","users","setUsers","matches","setMatches","useEffect","a","fetch","results","json","data","console","log","getUsers","onClick","firstNames","arr","i","length","push","name","first","getFirstNames","pairs","helpers","match","map","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports","names","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","shuffle","movedNames","slice","shift"],"mappings":"yPAaeA,G,MAbE,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SAC1B,OACE,8BACE,qBAAKC,UAAU,OAAf,SACE,gCACE,0CAAaF,GAAkB,aAC/B,4CAAeC,GAAsB,sBCNhC,MAA0B,kC,gBCsB1BE,EAjBA,WACb,OACE,8BACE,8BACE,oBAAID,UAAU,eAAd,SACE,oBAAIA,UAAU,UAAd,SACE,oBAAGE,KAAK,aAAR,UACE,qBAAKF,UAAWG,IAAOC,KAAMC,IAAKC,EAAOC,IAAI,UAC7C,sBAAMP,UAAWG,IAAOK,UAAxB,sC,gBCsDCC,EA3DH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,KAIhBC,qBAAU,YACM,uCAAG,8BAAAC,EAAA,sEACKC,MAClB,mEAFa,cACXC,EADW,gBAIEA,EAAQC,OAJV,OAIXC,EAJW,OAKfC,QAAQC,IAAI,SAAUF,GACtBC,QAAQC,IAAI,WAAYF,EAAKF,QAAQ,IAErCN,EAASQ,EAAKF,SARC,2CAAH,qDAWdK,KACC,IAqBH,OAHAF,QAAQC,IAAI,YAAaT,GACzBQ,QAAQC,IAAI,UAAWX,GAGrB,mCACE,sBAAKX,UAAU,YAAf,UACE,cAAC,EAAD,IACA,oBAAIA,UAAU,QAAd,uBAEA,mBAAGwB,QAhBe,WACtB,IAAIC,EAVgB,SAACC,GAErB,IADA,IAAID,EAAa,GACRE,EAAI,EAAGA,EAAID,EAAIE,OAAQD,IAC9BF,EAAWI,KAAKH,EAAIC,GAAGG,KAAKC,OAG9B,OAAON,EAIUO,CAAcrB,GAE3BsB,EAAQC,IAAQC,MAAMV,GAC1BX,EAAWmB,IAYsBjC,UAAU,WAAvC,yBAGCa,EAAQuB,KAAI,SAACD,EAAOE,GACnB,OACE,8BACE,cAAC,EAAD,CAAUvC,OAAQqC,EAAM,GAAIpC,SAAUoC,EAAM,MADpCE,YC7CPC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,aAAe,6BAA6B,KAAO,qBAAqB,QAAU,wBAAwB,UAAY,4B,gBCsBxID,EAAOC,QAAU,CACflB,MAAO,SAACmB,GACNA,EAvBY,SAACC,GAKf,IAJA,IACEC,EACAC,EAFEC,EAAeH,EAAM3B,OAID,IAAjB8B,GACLD,EAAcE,KAAKC,MAAMD,KAAKE,SAAWH,GAEzCF,EAAiBD,EADjBG,GAAgB,GAEhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAEvB,OAAOD,EAWGO,CAAQR,GAIhB,IAHA,IARU5B,EAQNqC,IARMrC,EAQY4B,EAAMU,MAAM,IAPhCnC,KAAKH,EAAIuC,SACNvC,GAODb,EAAU,GAELc,EAAI,EAAGA,EAAI2B,EAAM1B,OAAQD,IAChCd,EAAQgB,KAAK,CAACyB,EAAM3B,GAAIoC,EAAWpC,KAGrC,OAAOd,M","file":"static/js/main.7f468605.chunk.js","sourcesContent":["const UserCard = ({ sender, receiver }) => {\n  return (\n    <div>\n      <div className=\"card\">\n        <div>\n          <h3>Sender: {sender ? sender : \"No one.\"}</h3>\n          <h3>Receiver: {receiver ? receiver : \"No one.\"}</h3>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UserCard;\n","export default __webpack_public_path__ + \"static/media/santa.cb074196.svg\";","import React from \"react\";\n\nimport Santa from \"../../images/santa.svg\";\nimport styles from \"./Navbar.module.css\";\n\nconst Navbar = () => {\n  return (\n    <div>\n      <nav>\n        <ul className=\"navContainer\">\n          <li className=\"navItem\">\n            <a href=\"index.html\">\n              <img className={styles.logo} src={Santa} alt=\"Santa\" />\n              <span className={styles.logoTitle}>Secret Santa</span>\n            </a>\n          </li>\n        </ul>\n      </nav>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import \"./App.css\";\nimport { useEffect, useState } from \"react\";\n\nimport UserCard from \"./components/UserCard/UserCard\";\nimport Navbar from \"./components/Navbar/Navbar\";\n\nimport helpers from \"./helpers\";\n\nconst App = () => {\n  const [users, setUsers] = useState([]);\n  const [matches, setMatches] = useState([]);\n\n  useEffect(() => {\n    const getUsers = async () => {\n      let results = await fetch(\n        \"https://randomuser.me/api/?results=5&inc=name,gender,nat&noinfo\"\n      );\n      let data = await results.json();\n      console.log(\"data: \", data);\n      console.log(\"user 1: \", data.results[0]);\n\n      setUsers(data.results);\n    };\n\n    getUsers();\n  }, []);\n\n  const getFirstNames = (arr) => {\n    let firstNames = [];\n    for (let i = 0; i < arr.length; i++) {\n      firstNames.push(arr[i].name.first);\n    }\n\n    return firstNames;\n  };\n\n  const getRandomSantas = () => {\n    let firstNames = getFirstNames(users);\n\n    let pairs = helpers.match(firstNames);\n    setMatches(pairs);\n  };\n\n  console.log(\"matches: \", matches);\n  console.log(\"state: \", users);\n\n  return (\n    <>\n      <div className=\"container\">\n        <Navbar />\n        <h3 className=\"title\">Ho Ho Ho!</h3>\n\n        <p onClick={getRandomSantas} className=\"viewLink\">\n          View Santas\n        </p>\n        {matches.map((match, index) => {\n          return (\n            <div key={index}>\n              <UserCard sender={match[0]} receiver={match[1]} />\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navContainer\":\"Navbar_navContainer__Nd_xd\",\"logo\":\"Navbar_logo__1H3m4\",\"navItem\":\"Navbar_navItem__16nSi\",\"logoTitle\":\"Navbar_logoTitle__3OWsN\"};","// Fisher-Yates (aka Knuth) Shuffle\n// https://scotch.io/tutorials/how-to-build-a-memory-matching-game-in-javascript\nconst shuffle = (array) => {\n  let currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  while (currentIndex !== 0) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n};\n\n// to move index after shuffling array\nconst move = (arr) => {\n  arr.push(arr.shift());\n  return arr;\n};\n\nmodule.exports = {\n  match: (names) => {\n    names = shuffle(names);\n    let movedNames = move(names.slice(0));\n    let matches = [];\n\n    for (let i = 0; i < names.length; i++) {\n      matches.push([names[i], movedNames[i]]);\n    }\n\n    return matches;\n  },\n};\n"],"sourceRoot":""}